{"version":3,"sources":["webpack:///./src/content/posts/quick-wins-and-cleanups.mdx","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"+NAOaA,EAAe,CAC1B,MAAS,0BACT,KAAQ,2BACR,SAAY,YACZ,YAAe,2DAEXC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,8KACA,qOACA,4NACA,iJACA,kDACA,yEAAsD,oBAAIC,WAAW,KAAf,YAAtD,+BAA0H,oBAAIA,WAAW,KAAf,WAA1H,0CAAwM,oBAAIA,WAAW,KAAf,WAAxM,8BACA,iLACA,4KACA,+CACA,iEACA,6LACA,8JAA2I,oBAAIA,WAAW,KAAf,uBAA3I,KACA,oDACA,gIACA,oIACA,4DACA,8KACA,kLACA,iDACA,2IACA,qLACA,4JACA,2IACA,kJACA,gDACA,uKACA,gKACA,wCACA,oIACA,0CACA,qMACA,iHACA,oDACA,sOACA,oEACA,wBACE,oBAAIA,WAAW,MAAf,oDACA,oBAAIA,WAAW,MAAf,mDACA,oBAAIA,WAAW,MAAf,gGAEF,wCACA,qJACA,0KACA,4CACA,6KACA,gDACA,mFACA,yLACA,sLACA,4GACA,wBACE,oBAAIA,WAAW,MAAf,0CACA,oBAAIA,WAAW,MAAf,iIAEF,kEACA,sEACA,gIACA,yLACA,gKACA,sLACA,qMACA,oFACA,wLACA,yOACA,oPACA,4MACA,gDACA,iNACA,iIACA,gFACA,uBAAG,wBAAQA,WAAW,KAAnB,WAAH,6LACA,uBAAG,wBAAQA,WAAW,KAAnB,SAAH,2DACA,uBAAG,wBAAQA,WAAW,KAAnB,YAAH,gDACA,uBAAG,wBAAQA,WAAW,KAAnB,WAAH,8DACA,uBAAG,wBAAQA,WAAW,KAAnB,SAAH,gHACA,uBAAG,wBAAQA,WAAW,KAAnB,qBAAH,2BACA,uBAAG,wBAAQA,WAAW,KAAnB,iBAAH,gHACA,+CACA,uHACA,2RACA,oEACA,wBACE,oBAAIA,WAAW,MAAf,QACA,oBAAIA,WAAW,MAAf,QACA,oBAAIA,WAAW,MAAf,wBACA,oBAAIA,WAAW,MAAf,qCAEF,gDACA,6EACA,4LACA,wKACA,qIACA,0CACA,sMACA,6GACA,kDACA,uNACA,yLACA,8HACA,0CACA,0LACA,uKACA,kIACA,0EACA,2EACA,oRACA,wEACA,uCACA,mLACA,4KAKJJ,EAAWK,gBAAiB,G,kCCxIb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-content-posts-quick-wins-and-cleanups-mdx-c977164eef49e5655f8d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Quick Wins and Cleanups\",\n  \"date\": \"2021-04-02T00:00:00.000Z\",\n  \"category\": \"Blog Post\",\n  \"description\": \"Applying fundamentals of good design to fix design debt\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Not every design project is going to be a big bet. Sometimes the most impactful work is improving an existing UI, quickly, with minimal resources. `}</p>\n    <p>{`When the functionally is right, but there are issues with usability or efficiency — say it’s cumbersome, confusing, and looks and feels janky — the UI might need what I’ll call quicks wins and cleanups.`}</p>\n    <p>{`A quick win or cleanup can happen when, no matter how narrow the scope, tight the timeline, or inadequate a legacy UI might be, certain fundamentals of good design are applied to improve a UI. `}</p>\n    <p>{`In this post I’ll describe six of these fundamentals and explain how they can be applied to fix common design issues. `}</p>\n    <h2>{`01. Understand the Job`}</h2>\n    <p>{`Before improving a UI, take time to learn what `}<em parentName=\"p\">{`function`}</em>{` it’s meant to perform, the `}<em parentName=\"p\">{`outcome`}</em>{` it’s supposed to support, and in what `}<em parentName=\"p\">{`context`}</em>{` it’s intended to be used.`}</p>\n    <p>{`This way the design can be evaluated against a shared understanding of underlying needs, rather than making guesses and assumptions about a solution. `}</p>\n    <p>{`When there’s clarity on the job to be done, it also makes it possible to provide clarity for the people who’ll be interacting with the interface.`}</p>\n    <h2>{`02. Provide Clarity`}</h2>\n    <p>{`The opposite of clarity is confusion. `}</p>\n    <p>{`A confusing UI can make even simple tasks difficult because a user has to make sense of what they’re looking at before they can make a decision and take action.  `}</p>\n    <p>{`A clear UI is self-evident, meaning it’s immediately obvious what to do, how to do it, and why. It delivers on the UX design maxim, `}<em parentName=\"p\">{`don’t make me think`}</em>{`.`}</p>\n    <h3>{`Eliminate or Deemphasize`}</h3>\n    <p>{`Ask, does this piece of the UI support the job to be done? If not, then remove it or deemphasize it. `}</p>\n    <p>{`For example, get rid of optional fields in a form, or  move rarely-changed settings to a secondary view. `}</p>\n    <h3>{`Use Labels, Titles, and Headings`}</h3>\n    <p>{`Too often I encounter UIs without proper labeling. This includes labels on form elements, headings for different areas of content, and page titles.`}</p>\n    <p>{`A label is one of the easiest ways to remove ambiguity. These bits of text allow a user quickly understand what things do and identify what they need. `}</p>\n    <h3>{`Make Controls Visible`}</h3>\n    <p>{`Controls (buttons, toggles, dropdowns) enable action, navigation, and input. But they also inform and instruct. `}</p>\n    <p>{`Don’t hide or obfuscate important actions behind overflow menus or collapsed sections, and don’t place them far away from the content they’re related to. `}</p>\n    <p>{`If the UI has a primary action, then try to show it in the main view, and make it more visually prominent than secondary actions.`}</p>\n    <p>{`Use signifiers (e.g. underlined text and a hover state) to distinguish interactive elements from other content. `}</p>\n    <p>{`Finally, don’t make a user guess what a control will do by using vague language or, worse, by not using a label at all.`}</p>\n    <h3>{`Group Related Things`}</h3>\n    <p>{`Divide the interface logically by grouping content into sections based on category of information, function, or sequence within a workflow. `}</p>\n    <p>{`Organizing the UI in this way is like creating a map for the user. They’ll get an overview and quickly find what’s relevant to them. `}</p>\n    <h3>{`Shorten Copy`}</h3>\n    <p>{`People don’t read UIs, they scan. Replace blocks of text with a pithy sentence. Even better, use a label.`}</p>\n    <h3>{`Check Contrast`}</h3>\n    <p>{`Make sure the contrast ratios of text on backgrounds are meeting accessibility standards. Contrast ratios should be at least 3:1 for large text and 4.5:1 for small text. `}</p>\n    <p>{`I use a Figma plugin called Contrast to quickly check contrast ratios in my designs.  `}</p>\n    <h3>{`Use Established Patterns`}</h3>\n    <p>{`People use and are familiar with many UIs. Piggyback on their prior knowledge to make your UI easier to understand and use. Don’t ask users to learn novel layouts and interactions if it’s not necessary. `}</p>\n    <p>{`Examples of established patterns include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Placing a submit button at the bottom of a form.`}</li>\n      <li parentName=\"ul\">{`Using a stepper to indicate progress in a flow.`}</li>\n      <li parentName=\"ul\">{`Using a page layout that follows the F-shaped pattern of how people naturally scan a page. `}</li>\n    </ul>\n    <h3>{`Use Metaphor`}</h3>\n    <p>{`Familiar concepts can instantly convey the functionality of a feature, or even the mental model of an entire application. `}</p>\n    <p>{`A pencil icon, for example, implies text editing. A progress bar indicates a beginning, middle, and end in a process, and a goal to be reached.`}</p>\n    <h3>{`Create Hierarchy`}</h3>\n    <p>{`One of the most effective ways to provide clarity is to communicate the relative importance of elements on the page. That is to create hierarchy. `}</p>\n    <h2>{`03. Create Hierarchy`}</h2>\n    <p>{`If everything is a priority then nothing is a priority. `}</p>\n    <p>{`Without hierarchy, each element commands the same amount of attention, which means a user has to read everything from top to bottom to get the whole picture. `}</p>\n    <p>{`When hierarchy is established the relative importance of each element becomes distinct, and the number of things a user has to take in at once is reduced. `}</p>\n    <p>{`The goal of hierarchy is to guide a user’s attention in a sequence that makes it:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Easier to absorb and comprehend the UI`}</li>\n      <li parentName=\"ul\">{`Faster to discover relevant information and actions. Usually this means guiding attention from the general to the specific. `}</li>\n    </ul>\n    <p>{`There are two ways to create hierarchy:`}</p>\n    <h3>{`Adjust visual prominence to draw attention`}</h3>\n    <p>{`Create visual hierarchy by making one element more (or less) visually prominent than other elements. `}</p>\n    <p>{`Visual prominence increases with contrast, and contrast increases with surface area and the difference in darkness between a foreground and background color. `}</p>\n    <p>{`Headings should be more prominent than paragraph text, and primary actions should be more prominent than secondary or tertiary ones. `}</p>\n    <p>{`To make text more prominent, for example, increase font size and/or font weight (i.e. its surface area), and make it darker if it’s on a light background. `}</p>\n    <p>{`To emphasize an entire area of the UI, apply a different background color, add a border, and/or use shadow to increase its contrast and give the appearance of elevation. `}</p>\n    <h3>{`Arrange elements so that important content is seen first`}</h3>\n    <p>{`Structural hierarchy (document hierarchy for web pages) refers to the order of elements on a page, and the nesting of child elements within parent elements. `}</p>\n    <p>{`Show information that communicates the location and purpose of the UI — “Where am I? What is this?” — first. It sounds obvious but this is why page titles and navigation breadcrumbs go at the top of a page.`}</p>\n    <p>{`Nest elements to enable “drilling down” into content. This allows a user to progressively view information with increasing specificity, as they need it, rather than having to view everything up front and all at once. `}</p>\n    <p>{`One way to nest elements is to use expandable and collapsable sections to show and hide information. Another way is to organize content into first-level and second-level pages. `}</p>\n    <h2>{`04. Display Feedback`}</h2>\n    <p>{`If the UI has changed state or if it’s in the process of changing state, then the user needs to know about it — especially when the change was triggered by an action the user took.  `}</p>\n    <p>{`Feedback reduces uncertainty and frustration for the user, and preserves their confidence in the UI.  `}</p>\n    <p>{`A UI needs to show feedback for the following states:`}</p>\n    <p><strong parentName=\"p\">{`Success`}</strong>{` when a change in state was successful. This doesn’t always have to be a green checkmark and a success message. It can be as subtle as changing a label from “on” to “off,” for example. `}</p>\n    <p><strong parentName=\"p\">{`Error`}</strong>{` when a change in state failed or an input was invalid.`}</p>\n    <p><strong parentName=\"p\">{`Progress`}</strong>{` when quantity or position has incremented. `}</p>\n    <p><strong parentName=\"p\">{`Loading`}</strong>{` when the UI is between states, waiting for data to load. `}</p>\n    <p><strong parentName=\"p\">{`Empty`}</strong>{` when there is no data to show. This makes it clear there is no data rather than a bug or connection error. `}</p>\n    <p><strong parentName=\"p\">{`Connection Status`}</strong>{` if data isn’t syncing.`}</p>\n    <p><strong parentName=\"p\">{`Interactivity`}</strong>{` Hover, Pressed, Focused, Disabled states on interactive elements like buttons, links, inputs, and controls.`}</p>\n    <h2>{`05. Enable Recovery`}</h2>\n    <p>{`Don’t create dead ends. A dead end is a path in the UI that ends on a view with no options. `}</p>\n    <p>{`Every action should be reversible. There should always be a way to navigate back or forward or to take another action. In rare cases where none of these options are possible, use copy to tell the user what happened and provide guidance on what to do next. `}</p>\n    <p>{`UI patterns that enable recovery include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Undo`}</li>\n      <li parentName=\"ul\">{`Back`}</li>\n      <li parentName=\"ul\">{`Retry, redo, recover`}</li>\n      <li parentName=\"ul\">{`End on a main menu or start page`}</li>\n    </ul>\n    <h2>{`06. Make It Cohesive`}</h2>\n    <p>{`Interfaces that look cohesive feel easier to use. `}</p>\n    <p>{`That’s because our brains are wired to trust symmetry. When an environment feels harmonious, we’re more likely to relax and deeply engage with what we’re doing. `}</p>\n    <p>{`What makes a UI cohesive? It’s about composition: How each element relates to the others, and how they come together to form a larger whole. `}</p>\n    <p>{`Even if individual UI elements look and feel outdated, the larger UI can still be made to feel cohesive.  `}</p>\n    <h3>{`Align Elements`}</h3>\n    <p>{`If the UI reads left to right, then align the left edges of elements. This way the user’s eye can follow a straight line down the left edge of page instead of zig-zagging.`}</p>\n    <p>{`One way to do this is to set up a grid or keylines against which to align things. `}</p>\n    <h3>{`Use Consistent Spacing`}</h3>\n    <p>{`Space elements in consistent increments rather than haphazardly. The smallest increment of spacing is called the baseline. Every other spacing value should be a multiple of the baseline.  `}</p>\n    <p>{`A baseline establishes vertical rhythm, meaning you could draw evenly spaced horizontal lines all the way down the UI, and every element would sit on a line. `}</p>\n    <p>{`This lining up of things sends a signal to our brains that’s interpreted as familiarity and trust. `}</p>\n    <h3>{`Add whitespace`}</h3>\n    <p>{`Spacing also make it clear if elements are related or distinct. Closely spaced elements are seen as related, while those spaced far apart are seen as distinct.`}</p>\n    <p>{`If elements are too close together, they can all blend into one block of content, which can make the UI feel overwhelming and hard to scan. `}</p>\n    <p>{`Put enough space between each area of content so that they are perceived as distinct from one another. `}</p>\n    <h3>{`Consolidate Styles and Apply Them Consistently`}</h3>\n    <p>{`Don’t use three styles when one style will do.  `}</p>\n    <p>{`Styles should support levels of hierarchy in the UI (e.g. headings and paragraphs, primary and secondary actions). Remove styles that aren’t serving this purpose. Add styles only to fill gaps in hierarchy. Then apply them consistently across the UI.`}</p>\n    <p>{`This goes for text and interactive elements. `}</p>\n    <h2>{`Wrapping Up`}</h2>\n    <p>{`The six fundamentals listed above summarize technical knowledge and best practices that make it easier for humans to interact with software on screens. `}</p>\n    <p>{`Taken together, they can quickly transform a UI from confusing, frustrating, and inefficient to something that’s clear, accessible, and usable. `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}